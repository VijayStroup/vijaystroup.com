{"version":3,"sources":["components/Nav.js","components/Landing.js","components/About.js","components/Project.js","contexts/ProjectContext.js","components/Projects.js","components/Contact.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","HamNav","class","href","onClick","toggleBurger","style","color","className","initalHam","useState","hamClass","setHamClass","length","role","aria-label","src","alt","id","join","aria-expanded","data-target","aria-hidden","Landing","fontSize","target","paddingBottom","About","value","max","Cupid","OfflinePass","PersonalWebsite","DisneyDataScience","ProjectContext","createContext","ProjectContextProvider","props","activated","setActivated","name","img","active","icon","projects","setProjects","Provider","toggleTab","updatedState","map","project","push","children","Projects","useContext","key","paddingTop","Contact","setName","email","setEmail","message","setMessage","sent","setSent","method","onSubmit","e","preventDefault","body","JSON","stringify","headers","fetch","type","placeholder","required","onChange","resize","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"js/main.2493eefb.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\n\nconst Nav = () => {\n  const HamNav = () => {\n    return (\n      <aside class=\"menu\">\n        <ul class=\"menu-list\">\n          <li><a href=\"#about\" onClick={toggleBurger}>About</a></li>\n          <li><a href=\"#projects\" onClick={toggleBurger}>Projects</a></li>\n          <li><a href=\"#contact\" onClick={toggleBurger}>Contact</a></li>\n          <li>\n            <a href=\"/cli\"><i style={{ color: 'red' }} className=\"fas fa-terminal\"></i></a>\n          </li>\n        </ul>\n      </aside>\n    )\n  }\n\n  const initalHam = [\"navbar-burger\", \"burger\"]\n  const [hamClass, setHamClass] = useState(initalHam)\n\n  const toggleBurger = () => {\n    if(hamClass[hamClass.length - 1] === \"is-active\") {\n      setHamClass(initalHam)\n    } else {\n      setHamClass([...hamClass, \"is-active\"])\n    }\n  }\n\n  return (\n    <div>\n      <nav className=\"navbar is-fixed-top nav\" role=\"navigation\" aria-label=\"main navigation\">\n        <div className=\"navbar-brand\">\n          <a className=\"navbar-item\" href=\"/\">\n            <img src=\"/static/imgs/bitmoji.png\" alt=\"bitmoji\" />\n            <p id=\"navLogo\">Vijay Stroup</p>\n          </a>\n\n          <a role=\"button\" className={hamClass.join(' ')}  aria-label=\"menu\" aria-expanded=\"false\" data-target=\"nav\" onClick={toggleBurger}>\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n          </a>\n        </div>\n\n        <div id=\"nav\" className=\"navbar-menu\">\n          <div className=\"navbar-end\">\n            <a className=\"navbar-item\" href=\"#about\">About</a>\n            <a className=\"navbar-item\" href=\"#projects\">Projects</a>\n            <a className=\"navbar-item\" href=\"#contact\">Contact</a>\n            <a className=\"navbar-item\" href=\"/cli\"><i style={{ color: 'red' }} className=\"fas fa-terminal\"></i></a>\n          </div>\n        </div>\n      </nav>\n\n      { hamClass[hamClass.length - 1] === \"is-active\" ? <HamNav /> : null }\n    </div>\n  )\n}\n\nexport default Nav\n","import React from 'react'\n\nconst Landing = () => {\n  return (\n    <section className=\"hero is-fullheight-with-navbar\">\n      <div className=\"hero-body\">\n        <div className=\"container has-text-centered\">\n          <h1 style={{ fontSize: '40px' }} class=\"title\">Vijay Stroup</h1>\n          <h2 style={{ fontSize: '30px' }} class=\"subtitle\">Student | Programmer | Futurepreneur</h2>\n          <div className=\"columns is-centered\">\n            <div className=\"column is-narrow\">\n            <a href=\"https://github.com/VijayStroup\" target=\"_blank\"><i class=\"fab fa-github is-size-1\"></i></a>\n            </div>\n            <div className=\"column is-narrow\">\n              <a href=\"https://www.linkedin.com/in/vijay-stroup-40b54219a/\" target=\"_blank\"><i class=\"fab fa-linkedin is-size-1\"></i></a>\n            </div>\n            <div className=\"column is-narrow\">\n              <a href=\"https://bitbucket.org/vijaystroup/\" target=\"_blank\"><i class=\"fab fa-bitbucket is-size-1\"></i></a>\n            </div>\n            <div className=\"column is-narrow\">\n              <a href=\"https://gitlab.com/VijayStroup\" target=\"_blank\"><i class=\"fab fa-gitlab is-size-1\"></i></a>\n            </div>\n          </div>\n        </div>\n      </div>\n      <a style={{ paddingBottom: '1%' }} href=\"#about\" className=\"has-text-centered\"><i class=\"fas fa-chevron-circle-down is-size-2\"></i></a>\n    </section>\n  )\n}\n\nexport default Landing\n","import React from 'react'\n\nconst About = () => {\n  return (\n    <div className=\"container\">\n      <h1 id=\"about\" className=\"sectionTitle\">About</h1>\n\n      <div className=\"columns\">\n        <div className=\"column aboutText\">\n          <h1>Hi, I'm Vijay, and I am currently studying physics and computer science at The University of Central Florida.</h1>\n          <h3>\n            I love programming in variety of topics - creating applications is my favorite.<br />\n            As of April 2020, I have ~2.0 years of programming experience.\n          </h3>\n          <br />\n          <p>Click <a href=\"/static/resume.pdf\" target=\"_blank\">HERE</a> to view my Resume.</p>\n        </div> {/* end coloumn left */}\n        <div className=\"column\">\n          <h1 className=\"has-text-centered programmingTitle\">Programming Languages</h1>\n          <br />\n          <p>Python</p><progress className=\"progress is-link\" value=\"100\" max=\"100\">100%</progress>\n          <p>C</p><progress className=\"progress is-link\" value=\"70\" max=\"100\">70%</progress>\n          <p>Javascript (Vanilla, NodeJS, ReactJS)</p><progress className=\"progress is-link\" value=\"70\" max=\"100\">70%</progress>\n          <p>HTML & CSS</p> <progress className=\"progress is-link\" value=\"80\" max=\"100\">80%</progress>\n          <p className=\"has-text-right\">* Skill levels are relative to Python.</p>\n          <br /><br /><br />\n          <h1 className=\"has-text-centered programmingTitle\">Programming Tools</h1>\n          <br />\n          <ul>\n            <li>- Various 'cloud' servers (e.g. Digital Ocean, Vultur, OVH, private servers)</li>\n            <li>- Git Version Control (including many web-based git control system such as GitHub)</li>\n            <li>- Unix command line</li>\n            <li>- Visual Studio Code</li>\n          </ul>\n        </div> {/* end coloumn right */}\n      </div> {/* end coloumns */}\n    </div>\n  )\n}\n\nexport default About\n","// Things to do ->\n// * load in text files from static/txt\n// * map through different projects as to not repeat code and change text\n\nimport React from 'react'\n\nexport const Cupid = () => {\n  return (\n    <div>\n      <h1 style={{ color: '#BD302A' }} className=\"has-text-centered projTitle\">Cupid</h1>\n      <br />\n      <h2 className=\"projSubtitle\">Overview</h2>\n      <p>\n        Cupid is a discord bot that creates a marriage system where players in your server\n        can marry eachother and gain experience points together. The point is for couples\n        to try to gain the most experience on their server for bragging rights.\n      </p>\n      <br />\n      <h2 className=\"projSubtitle\">Language(s) & Unique Features</h2>\n      <ul>\n        <li>- Python, SQL</li>\n        <li>- Player expirence unique to server.</li>\n        <li>- Auto-updating leaderboard with PIL Python library.</li>\n      </ul>\n      <br />\n      <h2 className=\"projSubtitle\">Links</h2>\n      <ul>\n        <li><a href=\"https://github.com/VijayStroup/Cupid-Bot\" target=\"_blank\">- GitHub</a></li>\n        <li><a href=\"https://top.gg/bot/613044146952732682\" target=\"_blank\">- Top.gg</a></li>\n      </ul>\n    </div>\n  )\n}\n\nexport const OfflinePass = () => {\n  return (\n    <div>\n      <h1 style={{ color: '#F69D2B' }} className=\"has-text-centered projTitle\">Offline-Pass</h1>\n      <br />\n      <h2 className=\"projSubtitle\">Overview</h2>\n      <p>\n        Offline Pass is an offline password manager. This means none of your information is\n        stored in the 'cloud'. Even with your information being stored locally, all data\n        is either hashed or encrypted (no plain text anywhere).\n      </p>\n      <br />\n      <h2 className=\"projSubtitle\">Language(s) & Unique Features</h2>\n      <ul>\n        <li>- Python, SQL</li>\n        <li>- Modern password storing (e.g. hashing and encryption).</li>\n        <li>- Windows installer for Offline Pass - Python is not required.</li>\n        <li>- UI built with Tkinter.</li>\n      </ul>\n      <br />\n      <h2 className=\"projSubtitle\">Links</h2>\n      <ul>\n        <li><a href=\"https://github.com/VijayStroup/Offline-Pass\" target=\"_blank\">- GitHub</a></li>\n      </ul>\n    </div>\n  )\n}\n\nexport const PersonalWebsite = () => {\n  return (\n    <div>\n      <h1 style={{ color: '#001C2C' }} className=\"has-text-centered projTitle\">Personal Website</h1>\n      <br />\n      <h2 className=\"projSubtitle\">Overview</h2>\n      <p>\n        vijaystroup.com is my personal website. This is a central hub where all my projects are located\n        and ways in which to get in contact with me.\n        With the combination of not being a good graphic designer and having a technical background, the\n        best solution I thought of for my website was a design that simulated a terminal emulator.\n      </p>\n      <br />\n      <h2 className=\"projSubtitle\">Language(s) & Unique Features</h2>\n      <ul>\n        <li>- Python, JavaScript(Vanilla, NodeJS, ReactJS), HTML, CSS, JSON</li>\n        <li>- Flask for handling backend web configuration.</li>\n        <li>- Python and javascript(vanilla) interaction for cli.</li>\n        <li>- Simulated terminal emulator.</li>\n        <li>- Python Flask serving ReactJS for frontend.</li>\n      </ul>\n      <br />\n      <h2 className=\"projSubtitle\">Links</h2>\n      <ul>\n        <li><a href=\"https://github.com/VijayStroup/vijaystroupCOM\" target=\"_blank\">- GitHub</a></li>\n        <li><a href=\"/\">- vijaystroup.com</a></li>\n      </ul>\n    </div>\n  )\n}\n\nexport const DisneyDataScience = () => {\n  return (\n    <div>\n      <h1 style={{ color: '#ED9FC3' }} className=\"has-text-centered projTitle\">Disney Data Science</h1>\n      <br />\n      <h2 className=\"projSubtitle\">Overview</h2>\n      <p>\n        This project was my introduction to data science. In this project, I did many different\n        plots and reports with data such as Disney's movie's revenue, and Disney Parks' ride waiting\n        time. In the end, I made algorithm which asks for a users input, and will return the best\n        route they should take through a Disney Park to minimize line waiting time.\n      </p>\n      <br />\n      <h2 className=\"projSubtitle\">Language(s) & Unique Features</h2>\n      <ul>\n        <li>- Python</li>\n        <li>- Many charts and plots showing the data visually.</li>\n        <li>- Reports based on the data.</li>\n        <li>- Algorithm to find the best route at a certain Disney Park to minimize line waiting time.</li>\n      </ul>\n      <br />\n      <h2 className=\"projSubtitle\">Links</h2>\n      <ul>\n        <li><a href=\"https://github.com/VijayStroup/Disney-Visualization\" target=\"_blank\">- GitHub</a></li>\n      </ul>\n    </div>\n  )\n}\n","import React, { createContext, useState } from 'react'\n\nexport const ProjectContext = createContext()\n\nconst ProjectContextProvider = (props) => {\n  const [activated, setActivated] = useState(0)\n  const [projects, setProjects] = useState([\n    {\n      id: 0,\n      name: 'Cupid',\n      img: '/static/imgs/cupid.png',\n      active: 'is-active',\n      icon: 'fas fa-heart'\n    },\n    {\n      id: 1,\n      name: 'Offline-Pass',\n      img: '/static/imgs/offline_pass.png',\n      active: '',\n      icon: 'fas fa-lock'\n    },\n    {\n      id: 2,\n      name: 'Personal Website',\n      img: '/static/imgs/personal_website.png',\n      active: '',\n      icon: 'fas fa-desktop'\n    },\n    {\n      id: 3,\n      name: 'Disney Data Science',\n      img: '/static/imgs/disney_data_science.png',\n      active: '',\n      icon: 'fas fa-magic'\n    }\n  ])\n\n  const toggleTab = (id) => {\n    let updatedState = []\n    \n    projects.map((project) => {\n      if(id === project.id) {\n        updatedState.push({\n          id: project.id,\n          name: project.name,\n          img: project.img,\n          active: 'is-active',\n          icon: project.icon\n        })\n      } else {\n        updatedState.push({\n          id: project.id,\n          name: project.name,\n          img: project.img,\n          active: '',\n          icon: project.icon\n        })\n      }\n    })    \n\n    setActivated(id)\n    setProjects(updatedState)\n  }\n\n\n  return (\n    <ProjectContext.Provider value={{ projects, toggleTab, activated }}>\n      {props.children}\n    </ProjectContext.Provider>\n  )\n}\n\nexport default ProjectContextProvider\n","import React, { useContext } from 'react'\nimport { Cupid, OfflinePass, PersonalWebsite, DisneyDataScience } from './Project'\nimport { ProjectContext } from '../contexts/ProjectContext'\n\nconst Projects = () => {\n  const { projects, toggleTab, activated } = useContext(ProjectContext);\n\n  return (\n    <div className=\"container\">\n      <h1 id=\"projects\" className=\"sectionTitle\">Projects</h1>\n\n      <div className=\"columns is-centered\">\n        {projects.map((project) => {\n          return (\n            <div className=\"column\">\n              <img key={project.id} className=\"projImg\" src={project.img} onClick={() => toggleTab(project.id)} />\n            </div>\n          )\n        })}\n      </div>\n      <h1 id=\"moreToCome\" className=\"has-text-centered\">More to come :)</h1>\n\n      <div style={{ paddingTop: '2%' }} class=\"tabs is-centered\">\n        <ul>\n          {projects.map((project) => {\n            return (\n              <li key={project.id} class={project.active} onClick={() => toggleTab(project.id)}>\n                <a>\n                  <span class=\"icon is-small\"><i class={project.icon} aria-hidden=\"true\"></i></span>\n                  <span>{project.name}</span>\n                </a>\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n\n      {(() => {\n        switch (activated) {\n          case 0:\n            return <Cupid />\n          case 1:\n            return <OfflinePass />\n          case 2:\n            return <PersonalWebsite />\n          case 3:\n            return <DisneyDataScience />\n          default:\n            return <Cupid />\n        }\n      })()}\n    </div>\n  )\n}\n\nexport default Projects\n","// Things to do ->\n// * use one object in useState and update only that property of the object onChange\n\nimport React, { useState } from 'react'\n\nconst Contact = () => {\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  const [message, setMessage] = useState('')\n  const [sent, setSent] = useState(false)\n\n  const formSubmit = (e) => {\n    e.preventDefault()\n\n    const body = JSON.stringify({ name, email, message })\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-length': body.length\n    }\n    fetch('https://www.vijaystroup.com/email', { method: 'post', headers, body })\n    setSent(true)\n  }\n\n  return (\n    <div className=\"container\">\n    <h1 id=\"contact\" className=\"sectionTitle\">Contact</h1>\n\n    {!sent\n    ? (\n        <form method=\"post\" onSubmit={formSubmit}>\n          <div className=\"field\">\n            <label className=\"label\">Name</label>\n            <div className=\"control has-icons-left\">\n              <input className=\"input\" type=\"text\" name=\"name\" placeholder=\"John Doe\" required \n                value={name} onChange={(e) => setName(e.target.value)} />\n              <span className=\"icon is-small is-left\">\n                <i className=\"fas fa-signature\"></i>\n              </span>\n            </div>\n          </div> {/* end name */}\n          <div className=\"field\">\n            <label className=\"label\">Email</label>\n            <div className=\"control has-icons-left\">\n              <input className=\"input\" type=\"text\" name=\"email\" placeholder=\"j.doe@example.com\" required \n                value={email} onChange={(e) => setEmail(e.target.value)} />\n              <span className=\"icon is-small is-left\">\n                <i className=\"fas fa-at\"></i>\n              </span>\n            </div>\n          </div> {/* end email */}\n          <div className=\"field\">\n            <label className=\"label\">Message</label>\n            <div className=\"control\">\n              <textarea style={{ resize: 'none' }} className=\"textarea\" name=\"message\" placeholder=\"Message\" \n                required value={message} onChange={(e) => setMessage(e.target.value)} />\n            </div>\n          </div> {/* end message */}\n          <div className=\"control has-text-centered contactBtnDiv\">\n            <button id=\"contactBtn\" className=\"button\">Submit</button>\n          </div>\n        </form>\n      )\n    : <p id=\"sentThankYou\" className=\"has-text-centered\">Your message has been sent!<br />Thank you, {name}.</p>\n    }\n    </div>\n  )\n}\n\nexport default Contact\n","import React from 'react'\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <div className=\"content has-text-centered\">\n        <p>Created by <span style={{ color: '#FF010E' }}>Vijay Stroup</span></p>\n        <p>v2.0</p>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\n\nimport Nav from './components/Nav' \nimport Landing from './components/Landing'\nimport About from './components/About'\nimport Projects from './components/Projects'\nimport Contact from './components/Contact'\nimport Footer from './components/Footer'\n\nimport ProjectContextProvider from './contexts/ProjectContext'\n\nimport 'bulma/css/bulma.css'\nimport '@fortawesome/fontawesome-free/js/all.js'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Landing />\n      <About />\n      <ProjectContextProvider>\n        <Projects />\n      </ProjectContextProvider>\n      <Contact />\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}